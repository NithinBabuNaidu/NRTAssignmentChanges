[{"C:\\Program Files\\React\\nrtassignment-changes\\nrtassignment\\src\\index.js":"1","C:\\Program Files\\React\\nrtassignment-changes\\nrtassignment\\src\\reportWebVitals.js":"2","C:\\Program Files\\React\\nrtassignment-changes\\nrtassignment\\src\\App.js":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"6","hashOfConfig":"5"},{"size":4325,"mtime":1617773211500,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1sx8o3u",{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"12","messages":"13","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"C:\\Program Files\\React\\nrtassignment-changes\\nrtassignment\\src\\index.js",[],"C:\\Program Files\\React\\nrtassignment-changes\\nrtassignment\\src\\reportWebVitals.js",[],"C:\\Program Files\\React\\nrtassignment-changes\\nrtassignment\\src\\App.js",["15","16","17","18","19","20"],"import logo from \"./logo.svg\";\nimport React, { useEffect, useState } from \"react\";\nimport { Form, Card, Image, Icon, Grid, FormInput } from \"semantic-ui-react\";\nimport \"./App.css\";\nimport imageSrc from \"./github.png\";\nimport errorImg from \"./error.png\";\n\nfunction App() {\n  const [name, setName] = useState(\"\");\n  const [userName, setUserName] = useState(\"\");\n  const [repos, setRepos] = useState(\"\");\n  const [org, setOrg] = useState(\"\");\n  const [image, setImage] = useState(\"\");\n  const [userInput, setUserInput] = useState(\"\");\n  const [error, setError] = useState(null);\n  const [error1, setError1] = useState(null);\n  const [bool, setBool] = useState(true);\n  useEffect(() => {\n    fetch(\"https://api.github.com/users/example\")\n      .then((res) => res.json())\n      .then((data) => {\n        setData(data);\n      });\n  }, []);\n\n  const setData = ({ name, login, public_repos, company, avatar_url }) => {\n    setName(name);\n    setUserName(login);\n    setRepos(public_repos);\n    setOrg(company);\n    setImage(avatar_url);\n  };\n\n  const handleSearch = (e) => {\n    setUserInput(e.target.value);\n  };\n\n  const handleSubmit = () => {\n    fetch(`https://api.github.com/users/${userInput}`)\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.message) {\n          setError(data.message);\n        } else {\n          setData(data);\n          setError(null);\n        }\n      });\n    setBool(false);\n  };\n\n  return (\n    <div>\n      <div className=\"navbar\">Github Details</div>\n      <Grid columns=\"equal\" verticalAlign=\"middle\" centered>\n        <Grid.Column\n          style={{\n            paddingBottom: \"0px\",\n            paddingLeft: \"0px\",\n            paddingRight: \"0px\",\n          }}\n        >\n          <div className=\"card1\">\n            <Form onSubmit={handleSubmit}>\n              <Form.Field>\n                <input\n                  placeholder=\"Enter the username\"\n                  name=\"user\"\n                  onChange={handleSearch}\n                />\n              </Form.Field>\n              <Form.Field>\n                <Form.Button content=\"Search\" type=\"submit\" />\n              </Form.Field>\n            </Form>\n          </div>\n        </Grid.Column>\n        <Grid.Column\n          style={{\n            paddingBottom: \"0px\",\n            paddingLeft: \"0px\",\n            paddingRight: \"0px\",\n          }}\n          width={12}\n        >\n          {bool ? (\n            <div className=\"card2\">\n              <Card style={{ height: \"fit-content\" }}>\n                <Image src={imageSrc} wrapped ui={false} />\n                <Card.Content>\n                  <Card.Header>Please enter a username to proceed</Card.Header>\n                </Card.Content>\n              </Card>\n            </div>\n          ) : error ? (\n            <div className=\"card2\">\n              {\" \"}\n              <Card style={{ height: \"fit-content\" }}>\n                <Image src={errorImg} wrapped ui={false} />\n                <Card.Content>\n                  <Card.Header>Oops!</Card.Header>\n                  <Card.Header>Username {error}</Card.Header>\n                  <Card.Description>\n                    Looks like you have entered a wrong username. Please try\n                    again.\n                  </Card.Description>\n                </Card.Content>\n              </Card>\n            </div>\n          ) : (\n            <div className=\"card2\">\n              <Card style={{ height: \"fit-content\" }}>\n                <Image src={image} wrapped ui={false} />\n                <Card.Content style={{ height: \"fit-content\" }}>\n                  <Card.Header>{name}</Card.Header>\n                  <Card.Meta>{userName}</Card.Meta>\n                  <Card.Description />\n                </Card.Content>\n                <Card.Content extra>\n                  <a>\n                    <Icon name=\"briefcase\" />\n                    Organisation: {org ? org : \"Organisation Not Found\"}\n                  </a>\n                </Card.Content>\n                <Card.Content extra>\n                  <a>\n                    <Icon name=\"github\" />\n                    Repositories: {repos ? repos : \"No Repositories Found\"}\n                  </a>\n                </Card.Content>\n              </Card>\n            </div>\n          )}\n        </Grid.Column>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"21","severity":1,"message":"22","line":1,"column":8,"nodeType":"23","messageId":"24","endLine":1,"endColumn":12},{"ruleId":"21","severity":1,"message":"25","line":3,"column":41,"nodeType":"23","messageId":"24","endLine":3,"endColumn":50},{"ruleId":"21","severity":1,"message":"26","line":16,"column":10,"nodeType":"23","messageId":"24","endLine":16,"endColumn":16},{"ruleId":"21","severity":1,"message":"27","line":16,"column":18,"nodeType":"23","messageId":"24","endLine":16,"endColumn":27},{"ruleId":"28","severity":1,"message":"29","line":120,"column":19,"nodeType":"30","endLine":120,"endColumn":22},{"ruleId":"28","severity":1,"message":"29","line":126,"column":19,"nodeType":"30","endLine":126,"endColumn":22},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'FormInput' is defined but never used.","'error1' is assigned a value but never used.","'setError1' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement"]